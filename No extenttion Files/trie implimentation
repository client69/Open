class TrieNode {
	public :
	char data;
	TrieNode **children;
	bool isTerminal;

	TrieNode(char data) {
		this -> data = data;
		children = new TrieNode*[26];
		for(int i = 0; i < 26; i++) {
			children[i] = NULL;
		}
		isTerminal = false;
	}
};

class Trie {
    TrieNode *root;
    bool insertWord(TrieNode *root, string word) {
		// Base case
		if(word.size() == 0) {
			if (!root->isTerminal) {
				root -> isTerminal = true;
				return true;	
			} else {
				return false;
			}
		}

		// Small Calculation
		int index = word[0] - 'a';
		TrieNode *child;
		if(root -> children[index] != NULL) {
			child = root -> children[index];
		}
		else {
			child = new TrieNode(word[0]);
			root -> children[index] = child;
		}

		// Recursive call
		return insertWord(child, word.substr(1));
	}
    
       bool helper(TrieNode *root,string word)
    {
        if(word.size()==0)
            return root->isTerminal;
        
         int index=word[0]-'a';
        if(root->children[index]!=NULL)
        {  // TrieNode *child;
            //child = new TrieNode(word[0]);
            return helper(root->children[index],word.substr(1));
            
        }
        else
        {
            return false;
        }
           
       }
    
      TrieNode* find(TrieNode *root,string word)
    {   
         if(word.empty()) return root;
          int index=word[0]-'a';
        if(root->children[index]!=NULL)
        {
            return find(root->children[index],word.substr(1));
        }
        return NULL;
    }
public:
    /** Initialize your data structure here. */
    
    Trie() {
        root = new TrieNode('\0');
    }
    
    /** Inserts a word into the trie. */
    void insert(string word) {
        insertWord(root,word);
    }
    
    /** Returns if the word is in the trie. */
    bool search(string word) {
        return helper(root,word);
    }
    
    /** Returns if there is any word in the trie that starts with the given prefix. */
    bool startsWith(string prefix) {
        if(find(root,prefix)!=NULL)
        {
            return true;
        }
        return false;
    }
};
